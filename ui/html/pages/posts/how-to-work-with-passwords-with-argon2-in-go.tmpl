{{ define "title" }}How to Work with Passwords with Argon2 in Go{{ end }}
{{ define "how-to-work-with-passwords-with-argon2-in-go" }}
  <!doctype html>
  <html lang="en">
    {{ template "header" . }}
    <body
      class="relative bg-lightBeige flex min-h-screen flex-col text-neutral-900 overflow-y-scroll overflow-x-hidden"
      hx-ext="preload"
    >
      <header>
        {{ template "nav" . }}
      </header>

      <main
        id="main-content"
        class="mx-auto max-w-xl md:max-w-2xl lg:max-w-3xl xl:max-w-4xl grow px-4 sm:px-6 lg:px-8 flex flex-col "
      >
        {{ template "main" . }}
      </main>
    </body>
  </html>
{{ end }}

{{ define "main" }}
  <article
    class="mt-16 prose prose-neutral prose-sm sm:prose-base lg:prose-xl gsap-fade-in"
  >
    {{ template "post-back-button" . }}
    <h1>How to Work with Passwords with Argon2 in Go</h1>
    <div class="mt-8">
      <p>
        Usernames and passwords are still one of the main forms of user
        authentication for most web applications. It certainly has flaws and
        downsides, but in my opinion, I often still choose this option over
        signing up with Google, Github, etc. because of the ease of storing
        credentials with my password manager.
      </p>
      <p>
        When building a JSON API for an IMDB-like application as a portfolio
        project I wanted to build a full featured auth solution. In my opinion
        there is too much talk about how bad an idea it is to roll your own
        auth. I’m a fan of stepping into topics to better understand them oppose
        to backing off and claiming that only a selected few are smart enough to
        do so.
      </p>

      <p>
        This article will focus on how to use the Argon2 algorithm for hashing
        and verifying passwords in addition to some considerations for handling
        passwords in your application. We round off by encrypting the output of
        argon2 with a secret key for more in-depth security.
      </p>
      <p>
        Please note that this article is written by a mediocre web developer and
        is by no means expert advice. Treat the content accordingly.
      </p>
      <pre class="overflow-x-auto"><code class="language-markup">
Example of HTMX being used in the navigation component:
&lt;button
  hx-get="/posts"
  hx-target="main"
  hx-push-url="/posts"
  class="hover:border-b hover:border-neutral-800"
&gt;
  &lt;li class="py-2"&gt;Posts&lt;/li&gt;
&lt;/button&gt;
      </code></pre>
      <p>
        For styling my default has been <strong>tailwindcss</strong> for quite a
        while. Running it with Go instead of JavaScript is surprisingly simple
        using the Tailwindcss CLI. It's easy to set up your build and dev script
        in a Makefile to make it virtually the same as with npm. I did however
        end up using npm for some prettier plugins for go-templates and tailwind
        to get autoformatting and syntax highlighting when writing the html
        templates. These are just dev dependencies but having a node_modules
        directory in a Go project is pretty messy.
      </p>
      <p>
        I wanted to have a <strong>blog</strong> on the website mostly to
        publish things along my development journey to have something to look
        back on and help other people discover the same things as I. I decided
        to make the blog functionality directly with HTML. Why not markdown you
        may think? To write our blogposts in markdown we need a solution to
        parse the content and the graymatter. There are several good libraries
        which handle this use case, like
        <a
          href="https://github.com/russross/blackfriday"
          target="_blank"
          rel="noopener noreferrer"
          >BlackFriday</a
        >
        and
        <a
          href="https://github.com/gomarkdown/markdown"
          target="_blank"
          rel="noopener noreferrer"
          >gomarkdown</a
        >. The biggest reason for not choosing these is for applying situational
        styling. When using html tags directly you can style the element as you
        need it. When using markdown there is more difficult to style e.g. an
        instance of a paragraph differently because you can't add a class to the
        element. So, if my current post demand something different from the
        rest, I'm free to do what I want.
      </p>
      <p>
        I wanted to try <strong>GSAP</strong> for animations and interactivity.
        One of the reasons for this was the fact that they offer a CDN version
        where you can select which features to include. This way the user
        doesn't need to download more than necessary. The performance
        implications of these JavaScript based animations are usually terrible.
        Going forward I may try to design with CSS animations, the browser page
        transition API and so on to have less performance impact. As seen below
        GSAP can be pretty simple to work with:
      </p>

      <pre><code class="language-javascript" >
function animateOnLoad() {
  gsap.from(".gsap-fade-in", {
    duration: 1,
    y: 150,
    opacity: 0,
    ease: "expo.out",
  });
  gsap.from(".gsap-ohoi", {
    delay: 1,
    duration: 1.5,
    y: 150,
    scale: 0,
    opacity: 0,
    ease: "expo.out",
  });
}
document.addEventListener("DOMContentLoaded", animateOnLoad);
      </code></pre>

      <p>
        The site is <strong>hosted on a VPS</strong> server running Ubuntu with
        Nginx reverse proxy. I designed the deployment process as simple as
        possible using Makefile and rsync. Because Go compiles to a single
        binary I simply rsync the binary to the server and restart the service.
        I did have to spend some time setting up a unit file to properly run the
        binary on the server with production flags and restart policy, etc.
        After a bit of research, I found this process to be surprisingly easy to
        implement. Once again, I'm amazed by how well Linux tools and utils
        work.
      </p>

      <p>Thanks for reading! ❤️</p>
    </div>
  </article>
{{ end }}
